<?xml version="1.0" encoding="UTF-8"?>
<server description="Liberty beta">
    <!-- This beta introduces Java EE8 features that are incompatible with many existing features due to the differences
         in specification levels.  To account for this, there are 3 <featureManager> definitions listed below, two of
         which are commented out.  Only ONE of these <featureManager> definitions can be used at a time.  The default
         definition enables many existing beta features plus microProfile-1.2, and the commented out definitions
         enable combinations of Java EE8 features that work together. -->

    <!-- Feature combination #1 (existing beta features plus microProfile-1.2) -->
    <featureManager>
        <feature>webProfile-7.0</feature>
        <feature>adminCenter-1.0</feature>
        <feature>restConnector-2.0</feature>
        <feature>transportSecurity-1.0</feature>
        <feature>microProfile-1.2</feature>
        <feature>opentracing-1.0</feature>
        <feature>audit-1.0</feature>
        <feature>bluemixLogCollector-1.1</feature>
        <feature>logstashCollector-1.1</feature>
        <feature>validator-1.0</feature>
    </featureManager>

    <!-- Feature combination #2 (subset of Java EE8) -->
    <!--
    <featureManager>
        <feature>servlet-4.0</feature>
        <feature>jsf-2.3</feature>
    </featureManager>
    -->

    <!-- Feature combination #3 (subset of Java EE8) -->
    <!--
    <featureManager>
        <feature>jaxrs-2.1</feature>
    </featureManager>
    -->

    <!-- This template enables security necessary for Admin Center and some beta features.
         To get the full use of all the capabilities, a keystore and user registry are required. -->

    <!-- For the keystore, default keys are generated and stored in a keystore.
         To provide the keystore password, generate an encoded password using
         bin/securityUtility encode and add it below in the password attribute
         of the keyStore element. Then uncomment the keyStore element. -->
    <!--
    <keyStore password=""/>
    -->

    <!--Configure a basic user registry using the basicRegistry element.
        Specify your own user name below in the name attribute of the user element.
        For the password, generate an encoded password using bin/securityUtility encode
        and add it in the password attribute of the user element. -->
    <!--
    <basicRegistry id="basic" realm="BasicRealm">
        <user name="yourUserName" password="" />
    </basicRegistry>
     -->

    <!-- To access this server from a remote client add a host attribute to the
         httpEndpoint element, e.g. host="*" -->
    <httpEndpoint id="defaultHttpEndpoint"
                  httpPort="9080"
                  httpsPort="9443" />

    <!-- Automatically expand WAR files and EAR files -->
    <applicationManager autoExpand="true" />

    <!-- This is sample configuration for the bluemixLogCollector-1.1 feature -->
    <!--
    <keyStore id="javaKeyStore" location="${java.home}/lib/security/cacerts" password="changeit" />
    <ssl id="mySSLConfig" trustStoreRef="javaKeyStore" keyStoreRef="defaultKeyStore" />

    <bluemixLogCollector
        source="message,trace,garbageCollection,ffdc,accessLog"
        hostName="logs.opvis.bluemix.net"
        port="9091"
        tenant="your_logmet_space_Id"
        password="your_logmet_logging_token"
        sslRef="mySSLConfig"
    />
    -->
    <!-- This is sample configuration for the logstashCollector-1.1 feature -->
    <!--
    <logstashCollector sslRef="testSSLConfig" hostName="localhost" port="46000" >
        <source>accesslog</source>
        <source>message</source>
        <source>logs</source>
        <source>ffdc </source>
        <source>trace</source>
        <source>garbageCollection</source>
    </logstashCollector>
    -->
    
    <!-- This is sample configuration for the validator-1.0 feature.
    
         The validator-1.0 feature can currently be used to test a <dataSource> configuration
         element to determine if a successful connection can be made to the backend database.
         To test a data source connection using API Discovery, go to the following URL and
         expand the "Validator REST APIs" section in the API Discovery web interface:      
           https://localhost:9443/ibm/api/explorer/
    -->
    <!-- 
    <featureManager>
      <feature>jdbc-4.1</feature>
    </featureManager>
    <keyStore id="defaultKeyStore" password="changeit"/>
    <quickStartSecurity userName="admin" userPassword="admin"/>
    
    <library id="jdbcLib">
      <fileset dir="${server.config.dir}/jdbc" includes="*.jar"/>
    </library>
    
    <dataSource id="DefaultDataSource">
      <jdbcDriver libraryRef="jdbcLib"/>
   	  <properties.derby.embedded databaseName="memory:defaultdb" createDatabase="create"/>
  	</dataSource>
  	-->

</server>
